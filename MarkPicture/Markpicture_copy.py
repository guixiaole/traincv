# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Markpicture.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import xml

import cv2
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import os
import sys
import json
from LUMPOperate import SplitLump
from LUMPOperate import PhotoReplace
from LUMPOperate import OperatePhoto
import QClickableImage


class img_viewed(QWidget):

    def __init__(self, parent=None):
        super(img_viewed, self).__init__(parent)
        self.parent = parent
        self.desktop = QApplication.desktop()
        self.height = self.desktop.height()
        self.width = self.desktop.width()

        self.scroll_ares_images = QScrollArea(self)
        self.scroll_ares_images.setWidgetResizable(True)

        self.scrollAreaWidgetContents = QWidget(self)
        self.scrollAreaWidgetContents.setObjectName('scrollAreaWidgetContends')

        # 进行网络布局
        self.gridLayout = QGridLayout(self.scrollAreaWidgetContents)
        self.scroll_ares_images.setWidget(self.scrollAreaWidgetContents)

        self.scroll_ares_images.setGeometry(200, 100, int(self.width) * 0.5, int(self.height) * 0.7)
        self.vertocal1 = QVBoxLayout()

        # self.meanbar = QMenu(self)
        # self.meanbar.addMenu('&菜单')
        # self.openAct = self.meanbar.addAction('&Open',self.open)
        # self.startAct =self.meanbar.addAction('&start',self.start_img_viewer)
        self.open_file_pushbutton = QPushButton(self)
        self.open_file_pushbutton.setGeometry(10, 50, 100, 50)
        self.open_file_pushbutton.setObjectName('open_pushbutton')
        self.open_file_pushbutton.setText('打开视频')
        self.open_file_pushbutton.clicked.connect(self.openvideo)

        self.start_file_pushbutton = QPushButton(self)
        self.start_file_pushbutton.setGeometry(170, 50, 100, 50)
        self.start_file_pushbutton.setObjectName('start_pushbutton')
        self.start_file_pushbutton.setText('打开Excel')
        self.start_file_pushbutton.clicked.connect(self.openexcel)

        self.pushButton_3 = QPushButton(self)
        self.pushButton_3.setGeometry(10, 160, 100, 50)
        self.pushButton_3.setObjectName('pushButton_3')
        self.pushButton_3.setText('提取信号灯')
        self.pushButton_3.clicked.connect(self.extractlump)

        self.pushButton_4 = QPushButton(self)
        self.pushButton_4.setGeometry(10, 260, 100, 50)
        self.pushButton_4.setObjectName('pushButton_4')
        self.pushButton_4.setText('显示信号灯')
        self.pushButton_4.clicked.connect(self.showlump)

        self.vertocal1.addWidget(self.scroll_ares_images)
        self.show()

        # 设置图片的预览尺寸；
        self.displayed_image_size = 100
        self.col = 0
        self.row = 0

        self.initial_path = None
        self.max_columns = 0
        self.videoName = ""
        self.excelName = ""
        self.saveurl = "E:/save_video/"
        self.display_image_size = 200
        self.col = 0
        self.row = 0
        self.initial_path = None

    def openvideo(self):  # 打开视频的函数
        self.videoName, videoType = QFileDialog.getOpenFileName(self,
                                                                "打开视频",
                                                                "",
                                                                " *.mp4;;*.avi;;All Files (*)"
                                                                )
        print(self.videoName)

    def openexcel(self):
        self.excelName, excelType = QFileDialog.getOpenFileName(self,
                                                                "打开excel",
                                                                "",
                                                                "*.csv;;*.xls;;All Files (*)"
                                                                )

        print(self.excelName)

    def extractlump(self):
        if self.videoName == "" or self.excelName == "":
            QMessageBox.information(self, '提示', '请输入excel和视频')
        else:
            QMessageBox.information(self, '提示', '分割视频较久，请耐心等待')
            SplitLump.video_lump_store_classification1(self.videoName, self.excelName, self.saveurl)
            # SplitLump.video_lump_classification(self.videoName, self.excelName, self.saveurl)
            SplitLump.saveImage_calssification()
            QMessageBox.information(self, '提示', '已经分割好了视频，请点击显示视频')

    def showlump(self):
        """
        将图片进行存储，然后
        :return:
        """
        video_path = "E:/save_video/ShowImage/"
        image_name = os.listdir(video_path)
        if len(image_name) < 10:
            #  表示已经存在了照片了。
            QMessageBox.information(self, '提示', '稍等，正在提取视频')
            SplitLump.saveImage_calssification()
            image_name = os.listdir(video_path)
        print(image_name)
        image_name.sort()
        print(image_name)
        for i in range(len(image_name)):
            image_id = str(image_name[i])
            image_url = str(video_path + image_name[i])
            pixmap = QPixmap(image_url)
            self.addImage(pixmap, image_id)
            QApplication.processEvents()

    def clear_layout(self):
        for i in range(self.gridLayout.count()):
            self.gridLayout.itemAt(i).widget().deleteLater()

    def showlump2(self):
        """
        显示信号灯的片段，然后根据所选择的片段进行

        :return:
        @gxl 8/13
        """

        video_path = "E:/save_video/"
        video_name = os.listdir(video_path)
        frame_save = []
        for i in range(len(video_name)):
            video_path_part = os.path.join(video_path, video_name[i])
            cap = cv2.VideoCapture(video_path_part)  # 读取视频
            cap.set(cv2.CAP_PROP_POS_FRAMES, 50)
            while True:
                ret, frame = cap.read()
                if ret:
                    frame_save.append(frame)
                break
            cap.release()
        #  保存了所有的视频的图片
        for i in range(len(frame_save)):
            image_id = frame_save[i]
            rgbImage = cv2.cvtColor(image_id, cv2.COLOR_BGR2RGB)
            # cv2.imwrite('F:/train_photo_copy_smooth/' + "_%d.jpg" % frame_count, frame)
            image_id = QtGui.QImage(rgbImage.data, rgbImage.shape[1],
                                    rgbImage.shape[0], QImage.Format_RGB888)
            pixmap = QPixmap(image_id)
            self.addImage(pixmap, video_name[i])
            QApplication.processEvents()

    def addImage(self, pixmap, image_id):
        #  计算图像的列数
        nr_of_columns = self.get_nr_of_image_columns()
        #  这个布局内的数量
        nr_of_widgets = self.gridLayout.count()
        self.max_columns = nr_of_columns
        if self.col < self.max_columns:
            self.col += 1
        else:
            self.col = 0
            self.row += 1

        clickable_image = QClickableImage.QClickableImage(self.display_image_size, self.display_image_size, pixmap,
                                                          image_id)
        clickable_image.clicked.connect(self.on_left_clicked)
        clickable_image.rightClicked.connect(self.on_right_clicked)
        #  print(self.row, self.col)
        self.gridLayout.addWidget(clickable_image, self.row, self.col)

    def on_left_clicked(self, image_id):
        """
        点击左键，然后进行图片标注。
        :param image_id:
        :return:
        @gxl  8/17
        """
        OperatePhoto.clearData()
        QMessageBox.information(self, '提示', '确定要选择这个视频吗？' + image_id)
        #  在这里获取了选中的视频的url。
        image_id = image_id[:-4]  # 去掉jpg
        #  是那一帧
        framecount = int(image_id[3:-4])

        #  将所选的图片放入到input中去。
        frame_count = int(image_id[3:-4])
        video_url = "E:/save_video/" + image_id
        print(frame_count)
        self.store_image_to_input(video_url, frame_count)  # 将照片存入到input中
        os.system('labelme ' + ' openlabel/input/' + ' --output' + ' openlabel/output/PASCAL_VOC/')
        # 标记完了之后，对图片进行删除。
        #  标记完了，也是用yolo进行检测。
        OperatePhoto.clearData()
        # OperatePhoto.yolo_detect(video_url, framecount)  # 进行yolo的探测

        cord = self.get_output_labeljson()  # 获取xml文件的信息
        print(cord)
        #  在标记之后，通过yolo与标记的坐标进行一个合并。

        ratio = OperatePhoto.get_raito_length_width(cord)  # 这里获取的是最大最小的长宽比。
        #  对标记的进行预测。
        predict_hand = OperatePhoto.predict_frame_tobond(cord)  # 进行预测之后，应该进行储存
        OperatePhoto.store_pos_txt('txt/lumppospredicate.txt', predict_hand)  # 将预测结果进行储存。
        #  并且需要将yolo中的探测进行一个寻找中心。然后才能够进行合并。
        OperatePhoto.yolo_detct_to_smooth(ratio, video_url, frame_count)  # 对获取的pos进行一个平滑处理。
        #  对手工的pos与标记出来的pos进行一个合并。
        OperatePhoto.get_yolo_and_hand_pos()
        #  合并完成了之后，对其进行一个替换然后再修改的操作。
        OperatePhoto.replace_video_to_store(video_url, framecount)  # 进行图片替换，并进行将视频保存。
        # 对数据进行释放。
        OperatePhoto.clearData()

    def store_image_to_input(self, video_url, frame_count):
        """
        将选中的照片放入input中。
        :return:
        @gxl 8/17
        """
        store_url = 'openlabel/input/'
        cap = cv2.VideoCapture(video_url)  # 读取视频
        frames_num = cap.get(7)  # 获取视频总帧数、
        frames_range = int(frames_num // 50)
        for i in range(frames_range):
            cap.set(cv2.CAP_PROP_POS_FRAMES, i * 50)
            ret, frame = cap.read()
            if ret:
                cv2.imwrite(store_url + "%d.jpg" % (frame_count + i * 50), frame)
        cap.release()

    def get_output_labeljson(self):
        """
        获取标注好的json文件。当获取完毕之后，就开始删除所有的json文件。
        :return: 返回的是已经设置好的坐标。
        @gxl  8/25
        """
        json_url = 'openlabel/output/PASCAL_VOC/'
        txt_url = 'lumppospredicate.txt'
        label_jsons = os.listdir(json_url)
        cord = []
        for label_json in label_jsons:
            label_url = json_url + label_json
            label_count = int(label_json[:-5])
            with open(label_url, 'r') as f:
                dict_str = json.loads(f.read())
                dict_str = dict_str['shapes'][0]
                pos = dict_str['points']
                print(pos)
                xmax = round(pos[0][0])
                ymax = round(pos[0][1])
                xmin = round(pos[1][0])
                ymin = round(pos[1][1])
                print(label_count, xmax, ymax, xmin, ymin)
                w = abs(int(xmax) - int(xmin)) + 1
                h = abs(int(ymax) - int(ymin)) + 1
                cord.append((label_count, xmax, ymax, w, h))
        print(cord)
        #  获得所有标注的坐标之后，需要将xml文件进行删除。
        """
        暂时先注释掉。后面再
        for label_json in label_jsons:
            if label_json.endswith(".json"):
                os.remove(os.path.join(json_url, label_json))
        """
        #  把预测的数据进行存储。
        for j in range(0, len(cord)):
            with open(txt_url, "a") as file:
                file.write(str(cord[j][0]) + ";")
                for i in range(1, len(cord[j])):
                    file.write(str(cord[j][i]) + ",")
                file.write("\n")
        return cord

    def get_output_labelxml(self):
        """
        获取标注好的xml文件。当获取完毕之后，就开始删除所有的xml文件。
        :return: 返回的是已经设置好的坐标。
        @gxl  8/17
        """
        xml_url = 'openlabel/output/PASCAL_VOC/'
        label_xmls = os.listdir(xml_url)
        cord = []
        for label_xml in label_xmls:
            label_url = xml_url + label_xml  # 获取具体的xml文件
            label_count = int(label_xml[:-4])
            dom = xml.dom.minidom.parse(label_url)
            root = dom.documentElement
            object_name = root.getElementsByTagName('object')
            if len(object_name) > 0:  # 如果不为空的话。
                for j in range(len(object_name)):
                    bndbox = object_name[j].getElementsByTagName('bndbox')[0]
                    xmin = int(bndbox.getElementsByTagName('xmin')[0].firstChild.data)
                    ymin = int(bndbox.getElementsByTagName('ymin')[0].firstChild.data)
                    xmax = int(bndbox.getElementsByTagName('xmax')[0].firstChild.data)
                    ymax = int(bndbox.getElementsByTagName('ymax')[0].firstChild.data)
                    cord.append((label_count, xmin, ymin, abs(xmax - xmin), abs(ymax - ymin)))  # 将需要的坐标进行存储。
        #  获得所有标注的坐标之后，需要将xml文件进行删除。
        for label_xml in label_xmls:
            if label_xml.endswith(".xml"):
                os.remove(os.path.join(xml_url, label_xml))
        #  将所获得坐标进行返回。

        return cord

    def on_right_clicked(self, image_id):
        print('right clicked - image id = ' + image_id)

    def get_nr_of_image_columns(self):
        # 展示图片的区域，计算每排显示图片数。返回的列数-1是因为我不想频率拖动左右滚动条，影响数据筛选效率
        scroll_area_images_width = int(0.40 * self.width)
        if scroll_area_images_width > self.display_image_size:

            pic_of_columns = scroll_area_images_width // self.display_image_size  # 计算出一行几列；
        else:
            pic_of_columns = 1

        return pic_of_columns - 1


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = img_viewed()
    window.show()
    sys.exit(app.exec_())
